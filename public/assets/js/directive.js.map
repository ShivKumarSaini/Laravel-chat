{"version":3,"sources":["app-directive.js","stream-video-player.directive.js","convert-to-number.js","chat-text.directive.js","private-chat-video.directive.js","group-chat-video.directive.js","upload-file.js","multiple-upload.js","check-user-online.directive.js"],"names":["angular","module","directive","require","link","scope","elem","attrs","ctrl","firstPassword","pwCheck","add","on","$apply","$setValidity","val","$","elm","$validators","integer","modelValue","viewValue","$isEmpty","INTEGER_REGEXP","test","restrict","message","controller","$scope","alertify","URL_REGEXP","element","isValidUrl","hasClass","removeClass","addClass","socket","userService","$window","inRoom","$timeout","$uibModal","appSettings","USER","sessionStorage","closePopup","autoInstance","open","animation","templateUrl","BASE_URL","Math","random","toString","slice","backdrop","size","keyboard","result","then","res","data","role","id","model","findMember","from","user","status","requestUrl","room","virtualRoom","name","firstName","lastName","username","avatar","confirm","location","href","callBackDenial","setting","setHeader","autoCancel","msg","callback","isClicked","remove","totalRequest","length","text","emit","EMAIL_REGEXP","email","fallbackSrc","postLink","iElement","iAttrs","bind","attr","$el","$attr","ngModel","emojiarea","path","options","$eval","wysiwyg","$wysiwyg","$setViewValue","e","code","keyCode","which","trigger","preventDefault","$formatters","push","siblings","$sce","template","replace","vidSrc","showControl","vid","muted","console","log","videoId","isMuted","jQuery","context","firstChild","trustSrc","undefined","trustAsResourceUrl","controls","$parsers","parseInt","chatService","_","modelId","chatType","memberId","roomId","isStreaming","streamingInfo","PerformerChat","onlineService","chatPanel","hightLighTab","intervalChecking","setInterval","video","find","height","Performerchat","chatMessages","lastpage","orderBy","sort","limit","enableLoadMore","showLoading","isShowPrivateRequest","isOffline","isShowResetMessage","isShowRemoveMessage","loadPreviousMessage","findByModel","type","page","success","concat","last_page","currentpage","current_page","myInfo","userData","get","clone","tokens","members","guests","getOnlineMembers","onlineMembers","copy","mems","filter","m","$$phase","onModelReceiveInfo","member","existed","time","spendTokens","onMemberJoin","extised","onLeaveRoom","currentObject","joinRoomData","joinRoom","send","keyEvent","trim","sendMessage","sendTip","prompt","evt","value","isNumber","sendTokens","response","error","isOnline","notify","checkBanNick","lock","msgId","Date","now","sendObj","alert","sendChatMessage","createdAt","userId","focus","$emit","window","onReceiveChatMessage","ownerId","beep","unique","getTime","snd","Audio","play","onReceiveTip","tip","reqPrivateChat","reqGroupChat","banNick","index","addBlackList","findIndex","o","banStatus","unlockNick","removeBlackList","videoRequests","resetMessage","removeMsg","msgs","item","removeMessage","set","changeTab","tab","reloadUsersToken","userIds","map","getToken","join","i","ele","$on","each","outerHeight","animate","scrollTop","$interval","VideoStream","peerService","userRole","hasRoom","removeMyRoom","second","sendCallRequest","endStream","connection","isRoomOpened","roomid","userStreaming","errors","ROOM_NOT_AVAILABLE","acceptRequest","isJoinedRoom","ROOM_FULL","modelStreaming","RTCMultiConnection","maxParticipantsAllowed","socketURL","socketMessageEvent","session","audio","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","videosContainer","document","getElementById","onstream","event","existing","streamid","parentNode","removeChild","mediaElement","removeAttribute","volume","createElement","setAttributeNode","createAttribute","setAttribute","srcObject","stream","className","appendChild","setTimeout","localStorage","setItem","sessionid","getAllParticipants","reload","sendPaidTokens","onstreamended","onMediaError","DetectRTC","audioInputDevices","secondaryMic","deviceId","mediaConstraints","onclick","stopStreaming","spend","sendModelReceiveInfo","isFullScreenMode","showFullScreen","notShowFullScreen","onModelRoom","streams","isShowLargeVideo","startConversation","joinGroupRoom","joinConversation","streamId","str","videoCurr","mediaService","myfiles","fileName","multiple","showDelete","showPreview","allowedTypes","mediaType","parentId","showDone","current","$render","settings","url","method","statusBarWidth","dragdropWidth","onSuccess","files","xhr","file","html","onError","errMsg","deleteCallback","pd","indexOf","deleteImage","splice","deleteVideo","uploadFile","myFiles","uploadName","filename","innerHTML","checkBusy","isBusy","online"],"mappings":"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","file":"directive.js","sourcesContent":["/* \r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n\r\n\r\n'use strict';\r\n\r\nangular.module('matroshkiApp')\r\n        .directive('pwCheck', [function () {\r\n                return {\r\n                    require: 'ngModel',\r\n                    link: function (scope, elem, attrs, ctrl) {\r\n                        var firstPassword = '#' + attrs.pwCheck;\r\n                        elem.add(firstPassword).on('keyup', function () {\r\n                            scope.$apply(function () {\r\n                                // console.info(elem.val() === $(firstPassword).val());\r\n                                ctrl.$setValidity('pwmatch', elem.val() === $(firstPassword).val());\r\n                            });\r\n                        });\r\n                    }\r\n                };\r\n            }])\r\n\r\n        .directive('integer', function () {\r\n            return {\r\n                require: 'ngModel',\r\n                link: function (scope, elm, attrs, ctrl) {\r\n                    ctrl.$validators.integer = function (modelValue, viewValue) {\r\n                        if (ctrl.$isEmpty(modelValue)) {\r\n                            // consider empty models to be valid\r\n                            return true;\r\n                        }\r\n                        var INTEGER_REGEXP = /^\\-?\\d+$/;\r\n                        if (INTEGER_REGEXP.test(viewValue)) {\r\n                            // it is valid\r\n                            return true;\r\n                        }\r\n\r\n                        // it is invalid\r\n                        return false;\r\n                    };\r\n                }\r\n            };\r\n        })\r\n        .directive('welcomeMessage', function () {\r\n            return {\r\n                restrict: 'AE',\r\n                scope: {\r\n                    message: '@message'\r\n                },\r\n                controller: function ($scope) {\r\n                    if ($scope.message != '') {\r\n                        alertify.message($scope.message, 20);\r\n                    }\r\n                }\r\n            };\r\n        })\r\n\r\n        .directive('validateWebAddress', function () {\r\n            var URL_REGEXP = /^((?:http|ftp)s?:\\/\\/)(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:\\/?|[\\/?]\\S+)$/i;\r\n            return {\r\n                require: 'ngModel',\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs, ctrl) {\r\n                    element.on(\"keyup\", function () {\r\n                        var isValidUrl = URL_REGEXP.test(element.val());\r\n                        if (isValidUrl && element.hasClass('alert-danger') || element.val() == '') {\r\n                            element.removeClass('alert-danger');\r\n                        } else if (isValidUrl == false && !element.hasClass('alert-danger')) {\r\n                            element.addClass('alert-danger');\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        })\r\n        .directive('welcomePopup', [ 'socket', 'userService', '$window', function (socket, userService, $window) {\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    inRoom: '=inRoom'\r\n                },\r\n                controller: function ($scope, $timeout, $uibModal, appSettings) {\r\n                    \r\n                    if (!appSettings.USER && !sessionStorage.closePopup) {\r\n                        $timeout(function () {\r\n                            var autoInstance = $uibModal.open({\r\n                                animation: true,\r\n                                templateUrl: appSettings.BASE_URL + 'app/modals/register-modal/modal.html?v=' + Math.random().toString(36).slice(2),\r\n                                controller: 'RegisterInstanceCtrl',\r\n                                backdrop: 'static',\r\n                                size: 'lg welcome',\r\n                                keyboard: false\r\n                            });\r\n                            autoInstance.result.then(function (res) {\r\n\r\n                            });\r\n                        }, 3);\r\n                    }\r\n                    \r\n                    socket.on('video-chat-request', function (data) {\r\n                        //get request name\r\n                        //\r\n\r\n                        if (appSettings.USER && appSettings.USER.role == 'model' && appSettings.USER.id == data.model) {\r\n                            userService.findMember(data.from).then(function (user) {\r\n\r\n                                if (user.status == 200 && user.data.id) {\r\n                                    //show messages for private request\r\n                                    data.requestUrl = appSettings.BASE_URL + 'models/privatechat/' + data.from + '?roomId=' + data.room + '&vr=' + data.virtualRoom;\r\n                                    data.name = user.data.firstName + ' ' + user.data.lastName;\r\n                                    data.username = user.data.username;\r\n                                    data.avatar = user.data.avatar;\r\n                                    \r\n                                    //show as confirm\r\n                                    if(!$scope.inRoom){\r\n                                            \r\n                                            alertify.confirm(data.name + ' send private chat request.', function(){\r\n                                            $window.location.href = data.requestUrl;\r\n                                        },function(){\r\n                                            callBackDenial(data);\r\n\r\n                                        }).setting('labels',{'ok':'Accept', 'cancel': 'Deny'}).setHeader('Private Chat').autoCancel(25).setting('modal', false);\r\n                                    }else{\r\n                                        var msg = alertify.message('You just received a private call request from ' + data.name + ', click here to accept.',25);\r\n                                        msg.callback = function (isClicked) {\r\n                                            if (isClicked)\r\n                                                $window.location.href = data.requestUrl;\r\n                                            else\r\n                                                callBackDenial(data);\r\n    \r\n                                        };\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    function callBackDenial(data){\r\n                        angular.element('ul.list-user li#private-'+data.from).remove();\r\n                        var totalRequest = angular.element('.tab-content .tab-private ul.list-user li').length;\r\n\r\n                        angular.element('span#private-amount').text(totalRequest);\r\n                        socket.emit('model-denial-request', data.virtualRoom);\r\n                    }\r\n                    \r\n                }\r\n            };\r\n        }])\r\n        .directive('validateEmail', function () {\r\n            var EMAIL_REGEXP = /^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/;\r\n\r\n            return {\r\n                require: 'ngModel',\r\n                restrict: '',\r\n                link: function (scope, elm, attrs, ctrl) {\r\n                    // only apply the validator if ngModel is present and Angular has added the email validator\r\n                    if (ctrl && ctrl.$validators.email) {\r\n\r\n                        // this will overwrite the default Angular email validator\r\n                        ctrl.$validators.email = function (modelValue) {\r\n                            return ctrl.$isEmpty(modelValue) || EMAIL_REGEXP.test(modelValue);\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n        })\r\n        .directive('fallbackSrc', function () {\r\n            var fallbackSrc = {\r\n                link: function postLink(scope, iElement, iAttrs) {\r\n                    iElement.bind('error', function () {\r\n                        angular.element(this).attr(\"src\", iAttrs.fallbackSrc);\r\n                    });\r\n                }\r\n            }\r\n            return fallbackSrc;\r\n        })\r\n        .directive('emojiInput', [ '$timeout', function ($timeout) {\r\n    return {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        link: function ($scope, $el, $attr, ngModel) {\r\n            $.emojiarea.path = '/lib/jquery-emojiarea-master/packs/basic/images';\r\n            \r\n            var options = $scope.$eval({wysiwyg:true});\r\n            var $wysiwyg =  $($el[0]).emojiarea(options);\r\n            $wysiwyg.on('change', function () {\r\n                ngModel.$setViewValue($wysiwyg.val());\r\n                $scope.$apply();\r\n            });\r\n            \r\n         $('.chat-mes').on('keypress',function(e) {\r\n\r\n            var code = e.keyCode || e.which;\r\n            if(code == 13) {\r\n                angular.element('#send-message').trigger('click');\r\n               e.preventDefault();\r\n            }\r\n         });\r\n            ngModel.$formatters.push(function (data) {\r\n                // emojiarea doesn't have a proper destroy :( so we have to remove and rebuild\r\n                $wysiwyg.siblings('.emoji-wysiwyg-editor, .emoji-button').remove();\r\n                $timeout(function () {\r\n                    $wysiwyg.emojiarea(options);\r\n                }, 0);\r\n                return data;\r\n            });\r\n        }\r\n    };\r\n}]);","'use strict';\r\n\r\nangular.module('matroshkiApp').directive('videoPlayer', ['$sce', function ($sce) {\r\n  return {\r\n    template: '<div><video ng-src=\"{{trustSrc()}}\" id=\"streaming-{{videoId}}\" autoplay  class=\"img-responsive\" height=\"130px\"></video></div>',\r\n    restrict: 'E',\r\n    replace: true,\r\n    scope: {\r\n      vidSrc: '@',\r\n      showControl: '@',\r\n      vid: '@',\r\n      muted:'='\r\n    },\r\n    link: function link(scope, elem, attr) {\r\n      console.log('Initializing video-player');\r\n      scope.videoId = scope.vid;\r\n      scope.isMuted = scope.muted ? 'muted':'';\r\n        if(scope.isMuted){\r\n        jQuery(elem.context.firstChild).attr('muted',true);\r\n         elem.context.firstChild.muted = true;\r\n       }\r\n      \r\n      scope.trustSrc = function () {\r\n        if (!scope.vidSrc) {\r\n          return undefined;\r\n        }\r\n        return $sce.trustAsResourceUrl(scope.vidSrc);\r\n      };\r\n      if (scope.showControl && elem.context && elem.context.firstChild) {\r\n        elem.context.firstChild.controls = true;\r\n      }\r\n    }\r\n  };\r\n}]);","/* \r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n\r\nangular.module('matroshkiApp').directive('convertToNumber', function() {\r\n  return {\r\n    require: 'ngModel',\r\n    link: function(scope, element, attrs, ngModel) {\r\n      ngModel.$parsers.push(function(val) {\r\n        return parseInt(val);\r\n      });\r\n      ngModel.$formatters.push(function(val) {\r\n        return '' + val;\r\n      });\r\n    }\r\n  };\r\n});","'use strict';\r\n\r\nangular.module('matroshkiApp').directive('mChatText', ['appSettings', 'chatService', '_', '$uibModal', function (appSettings, chatService, _, $uibModal) {\r\n    return {\r\n      restrict: 'AE',\r\n      templateUrl: appSettings.BASE_URL + 'app/views/partials/chat-text-widget.html',\r\n      scope: {\r\n        modelId: '=modelId',\r\n        chatType: '@chatType',\r\n        memberId: '@',\r\n        roomId: '@',\r\n        isStreaming: '@',\r\n        streamingInfo : \"=ngModel\"\r\n      },\r\n      controller: function ($scope, $timeout, appSettings, PerformerChat, $uibModal, socket, $sce, userService, chatService, onlineService) {\r\n        $scope.chatPanel = 'chats';\r\n        $scope.hightLighTab = false;\r\n        //redirect to private chat if group_chat_allowed is no\r\n        var intervalChecking = setInterval(function(){\r\n          var video = $('#videos-container').find('video');\r\n          if(video.height() && video.height() > 0) {\r\n            $('.list-chat').height(video.height() - 100);\r\n          }\r\n        }, 3000);\r\n\r\n        $scope.Performerchat = PerformerChat;\r\n        $scope.chatMessages = [];\r\n        $scope.lastpage = 1;\r\n        $scope.orderBy = 'createdAt';\r\n        $scope.sort = 'desc';\r\n        $scope.limit = 20;\r\n        $scope.enableLoadMore = false;\r\n        $scope.showLoading = false;\r\n        $scope.isShowPrivateRequest = false;\r\n        $scope.isOffline = false;\r\n        $scope.isShowResetMessage = false;\r\n        $scope.isShowRemoveMessage = false;\r\n        if(appSettings.USER && appSettings.USER.role === 'model') {\r\n          $scope.isShowResetMessage = true;\r\n          $scope.isShowRemoveMessage = true;\r\n        }\r\n\r\n        ////load messages at first time\r\n        // chatService.findByModel({\r\n        //   modelId: $scope.modelId,\r\n        //   memberId: $scope.memberId || '',\r\n        //   type: $scope.chatType,\r\n        //   page: $scope.lastpage,\r\n        //   orderBy: $scope.orderBy,\r\n        //   sort: $scope.sort,\r\n        //   limit: $scope.limit\r\n        // }).success(function (res) {\r\n        //   $scope.chatMessages = $scope.chatMessages.concat(res.data);\r\n        //   //$scope.gotoAnchor($scope.chatMessages.length - 1);\r\n\r\n        //   if (res.last_page > $scope.lastpage) {\r\n\r\n        //     $scope.lastpage += 1;\r\n\r\n        //     $scope.enableLoadMore = true;\r\n        //   } else {\r\n        //     $scope.enableLoadMore = false;\r\n        //   }\r\n        //   $scope.currentpage = res.current_page;\r\n\r\n        //   //scroll to bottom\r\n        //   $timeout(function () {\r\n        //     $scope.$emit('new-chat-message');\r\n        //   });\r\n        // });\r\n\r\n        $scope.loadPreviousMessage = function () {\r\n\r\n          if ($scope.enableLoadMore) {\r\n            $scope.showLoading = true;\r\n            chatService.findByModel({\r\n              modelId: $scope.modelId,\r\n              memberId: $scope.memberId || '',\r\n              type: $scope.chatType,\r\n              page: $scope.lastpage,\r\n              orderBy: $scope.orderBy,\r\n              sort: $scope.sort,\r\n              limit: $scope.limit\r\n            }).success(function (res) {\r\n              $scope.chatMessages = $scope.chatMessages.concat(res.data);\r\n              $scope.showLoading = false;\r\n              if (res.last_page > $scope.lastpage) {\r\n                $scope.lastpage += 1;\r\n\r\n                $scope.enableLoadMore = true;\r\n              } else {\r\n                $scope.enableLoadMore = false;\r\n              }\r\n              $scope.currentpage = res.current_page;\r\n\r\n            });\r\n          }\r\n        };\r\n\r\n        $scope.data = {text: ''};\r\n//        $.emoticons.define(emoticonsData);\r\n//        $scope.$on('emoticonsParser:selectIcon', function (event, icon) {\r\n//          $scope.data.text += ' ' + icon;\r\n//          $scope.$$phase || $scope.$apply();\r\n//        });\r\n\r\n        //get my info\r\n        //\r\n        var myInfo = [];\r\n        $scope.userData = appSettings.USER;\r\n\r\n\r\n\r\n        userService.get().then(function (data) {\r\n          if (data.data != \"\") {\r\n            $scope.userData = _.clone(data.data);\r\n            $scope.streamingInfo.tokens = data.data.tokens;\r\n          } else {\r\n            $scope.userData = {\r\n              id: 0,\r\n              username: 'guest',\r\n              avatar: ''\r\n            };\r\n          }\r\n        });\r\n        \r\n        $scope.members = {};\r\n        $scope.guests = [];\r\n        socket.getOnlineMembers($scope.roomId);\r\n        socket.onlineMembers(function (data) {\r\n          $scope.members = angular.copy(data.members);\r\n          const mems = angular.copy($scope.members);\r\n          // if(appSettings.USER){\r\n          //   _.remove($scope.members, function (currentObject) {\r\n          //     return currentObject.id == appSettings.USER.id;\r\n          //   });\r\n          // }else {\r\n          //   _.remove($scope.members, function (currentObject) {\r\n          //     return currentObject.id == appSettings.IP;\r\n          //   });\r\n          // }\r\n          $scope.guests = mems.filter(function(m) {\r\n            return m.role === 'guest';\r\n          });\r\n          $scope.$$phase || $scope.$apply();\r\n        });\r\n         socket.onModelReceiveInfo(function (data){\r\n            if(data.member){\r\n                var existed = _.find($scope.members, ['id', data.member]);\r\n                if(existed){\r\n                    existed.time = (existed.time) ? existed.time + parseInt(data.time) : parseInt(data.time);\r\n                    existed.spendTokens = (existed.spendTokens) ? existed.spendTokens + parseInt(data.tokens) : parseInt(data.tokens);\r\n                }\r\n            } \r\n         });\r\n\r\n        \r\n        //listen event when member is online\r\n        socket.onMemberJoin(function (data) {\r\n         console.log('onmenberjoin', data);\r\n          if(data && data.id != $scope.modelId){\r\n//            console.log(data, $scope.members);\r\n            var extised = _.find($scope.members, ['id', data.id]);\r\n            if(!extised){\r\n                $scope.members.push(angular.copy(data));\r\n                const mems = angular.copy($scope.members);\r\n                $scope.guests = mems.filter(function(m) {\r\n                  return m.role === 'guest';\r\n                });\r\n            }\r\n          }\r\n\r\n          if ($scope.userData && $scope.userData.role == 'model') {\r\n            if (data && typeof data.username != 'undefined' && $scope.chatType != 'private') {\r\n              alertify.message(data.username + \" join the room.\");\r\n            }\r\n          }\r\n          //TODO: get user join data via api and show on model message by userId\r\n          //update view\r\n         \r\n          $scope.$$phase || $scope.$apply();\r\n        });\r\n        \r\n        //listen event when member is leave\r\n        socket.onLeaveRoom(function (data) {\r\n//          console.log(data, $scope.chatType);\r\n          if (($scope.userData && $scope.userData.role == 'model' && data && data.username && $scope.chatType == 'public') || $scope.chatType == 'group') {\r\n            alertify.message(data.username + \" left the room\");\r\n            \r\n          }\r\n          if($scope.chatType == 'private'){\r\n//              socket.emit('model-leave-room');\r\n          }\r\n          \r\n          \r\n          _.remove($scope.members, function (currentObject) {\r\n            return currentObject.id === data.id;\r\n          });\r\n          //update view\r\n          $scope.$$phase || $scope.$apply();\r\n        });\r\n\r\n\r\n\r\n        //if user is not anonymous, join to group chat\r\n        if (!appSettings.USER) {\r\n\r\n          if ($scope.chatType === 'private') {\r\n            //request to join private room\r\n            socket.emit('join-private-room', {\r\n              modelId: $scope.modelId,\r\n              memberId: $scope.memberId\r\n            }, function (data) {\r\n              //assign room id to the thread\r\n              roomId = data.id;\r\n            });\r\n          } else {\r\n            //join to public room\r\n            var joinRoomData = {\r\n              roomId: $scope.roomId,\r\n              userData: $scope.userData,\r\n              type: $scope.chatType\r\n            };\r\n\r\n            socket.joinRoom(joinRoomData);\r\n          }\r\n        } else {\r\n          var joinRoomData = {\r\n            roomId: $scope.roomId,\r\n            userData: $scope.userData,\r\n            type: $scope.chatType\r\n          };\r\n\r\n          socket.joinRoom(joinRoomData);\r\n        }\r\n\r\n        $scope.send = function (keyEvent) {\r\n          if ((keyEvent && keyEvent.keyCode === 13) || !keyEvent) {\r\n              \r\n            //allow once user inputs text only\r\n            var text = $scope.data.text.trim();\r\n            sendMessage(text);\r\n            \r\n            $scope.data.text = '';\r\n            \r\n          }\r\n        };\r\n\r\n        //send tips\r\n        $scope.sendTip = function () {\r\n\r\n          alertify.prompt(\"Enter your tips.\", 10,\r\n                  function (evt, value) {\r\n                    if (angular.isNumber(parseInt(value)) && parseInt(value) > 0) {\r\n                      userService.sendTokens($scope.roomId, parseInt(value)).then(function (response)\r\n                      {\r\n                        if (response.data.success == false) {\r\n                          alertify.error(response.data.message);\r\n                          return;\r\n                        } else {\r\n                          alertify.success(response.data.message);\r\n                          sendMessage('Send ' + parseInt(value) + ' tokens');\r\n                        }\r\n                      });\r\n                    } else {\r\n                      alertify.error('Please enter a number.');\r\n                      $scope.sendTip();\r\n                    }\r\n\r\n\r\n                  });\r\n        };\r\n\r\n\r\n\r\n        function sendMessage(message) {\r\n          socket.emit('checkOnline', $scope.modelId.toString(), function(data) {\r\n            if(!data.isOnline) {\r\n              return alertify.error('Model is now offline');\r\n            }\r\n             //check room id\r\n            //TODO - wait timeout\r\n            if (!$scope.roomId) {\r\n              return alertify.notify('Room does not exist.', 'warning');\r\n            }\r\n            if (typeof message !== 'undefined' && message != '') {\r\n              userService.checkBanNick($scope.modelId).then(function (data) {\r\n                if (data.data.success && data.data.lock == 'no') {\r\n                  const msgId = Date.now();\r\n                  var sendObj = {\r\n                    roomId: $scope.roomId,\r\n                    text: message,\r\n                    type: $scope.chatType,\r\n                    id: msgId                  \r\n                  };\r\n                  if (!appSettings.USER) {\r\n                    return alertify.alert('Warning', 'Please login to enter new message.');\r\n\r\n                  }\r\n\r\n                  //emit chat event to server\r\n                  socket.sendChatMessage(sendObj);\r\n\r\n  //                var icon = $.emoticons.replace(message);\r\n                  \r\n                  $scope.chatMessages.push({text: message, username: $scope.userData.username, createdAt: new Date(), userId: appSettings.USER.id, id: msgId});\r\n                  $scope.data.text = '';\r\n                  angular.element('.emoji-wysiwyg-editor').focus();\r\n                  $scope.$emit('new-chat-message');\r\n                } else {\r\n                  alertify.error(data.data.message);\r\n                }\r\n\r\n              });\r\n\r\n            }\r\n          });\r\n         \r\n        }\r\n\r\n        /**\r\n         * @requires user is premium and premium chat only\r\n         * @returns check and process payment for premium\r\n         */\r\n        if ($scope.chatType != 'public' && !appSettings.USER) {\r\n          alertify.alert('Warning', 'Please login to join this room.');\r\n          window.location.href = '/';\r\n        }\r\n\r\n        //add handler for new message from server\r\n        socket.onReceiveChatMessage(function (data) {\r\n//          var icon = data.text;\r\n//\r\n//          icon = $.emoticons.replace(data.text);\r\n//        console.log(data.message.ownerId);\r\n          $scope.chatMessages.push({text: data.text, username: data.username, createdAt: data.createdAt, userId: data.message.ownerId, id: data.id});\r\n          //calculate position and scroll to bottom\r\n          $scope.$emit('new-chat-message');\r\n        });\r\n        //get send tip event\r\n        function beep() {\r\n          const unique = new Date().getTime();\r\n          var snd = new Audio(\"/sounds/received_message.mp3?v=\" + unique);\r\n          snd.play();\r\n        }\r\n        socket.onReceiveTip(function (data) {\r\n          $scope.chatMessages.push({text: data.text, tip: 'yes', username: data.username, createdAt: data.createdAt});\r\n          //calculate position and scroll to bottom\r\n          $scope.$emit('new-chat-message');\r\n          beep();\r\n        });\r\n        \r\n        \r\n        //check group and private chat init\r\n        socket.reqPrivateChat($scope.modelId);\r\n        socket.reqGroupChat($scope.modelId);\r\n        $scope.banNick = function (user, index) {\r\n          userService.addBlackList(user.username).then(function (data) {\r\n            if (data.data.success) {\r\n              alertify.success(data.data.message);\r\n              _.findIndex($scope.chatMessages, function (o) {\r\n                if (o.username == user.username) {\r\n                  o.banStatus = 'yes';\r\n                }\r\n              });\r\n            } else {\r\n              alertify.error(data.data.message);\r\n            }\r\n          });\r\n        };\r\n        $scope.unlockNick = function (user, index) {\r\n          userService.removeBlackList(user.username).then(function (data) {\r\n            if (data.data.success) {\r\n              alertify.success(data.data.message);\r\n              _.findIndex($scope.chatMessages, function (o) {\r\n                if (o.username == user.username) {\r\n                  o.banStatus = 'no';\r\n                }\r\n              });\r\n            } else {\r\n              alertify.error(data.data.message);\r\n            }\r\n          });\r\n        };\r\n        \r\n        if(appSettings.USER && $scope.modelId == appSettings.USER.id){\r\n            $scope.isShowPrivateRequest = true;\r\n        }\r\n        \r\n         //TODO - move to global controller\r\n        //this is for test only\r\n        $scope.videoRequests = [];\r\n        socket.on('video-chat-request', function (data) {\r\n          //get request name\r\n          //\r\n//          console.log(data);\r\n          if($scope.modelId == data.model) {\r\n            userService.findMember(data.from).then(function (user){\r\n              if(user.status == 200 && user.data.id){\r\n                //show messages for private request\r\n                data.requestUrl = appSettings.BASE_URL + 'models/privatechat/' + data.from + '?roomId=' + data.room + '&vr=' +data.virtualRoom;\r\n                data.name = user.data.firstName + ' ' + user.data.lastName;\r\n                data.username = user.data.username;\r\n                data.avatar = user.data.avatar;\r\n                data.id = user.data.id;\r\n                var existed = _.find($scope.videoRequests, ['from', data.from]);\r\n                if(existed){\r\n                    existed.requestUrl = data.requestUrl;\r\n                }else{\r\n                      $scope.videoRequests.push(data);\r\n                }\r\n                if($scope.chatPanel !== 'privateChat'){\r\n                  $scope.hightLighTab = true;\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n        socket.on('stop-video-request', function (data) {\r\n          if($scope.modelId == data.model) {\r\n            _.remove($scope.videoRequests, ['from', data.from]);\r\n          }\r\n        });\r\n\r\n        $scope.resetMessage = function(){\r\n          $scope.chatMessages = [];\r\n          socket.emit('reset-chat-message',{\r\n            roomId: $scope.roomId\r\n          });\r\n        };\r\n        socket.on('reset-chat-message', function(data) {\r\n          $scope.chatMessages = [];\r\n        });\r\n        function removeMsg(msgId){\r\n          const msgs = angular.copy($scope.chatMessages);\r\n          $scope.chatMessages  = msgs.filter(function(item) {\r\n            return item.id !== msgId;\r\n          });\r\n          $scope.$$phase || $scope.$apply();\r\n        }\r\n        $scope.removeMessage = function(msgId){\r\n          alertify.confirm(\"Are you sure you want to delete this message?\",\r\n          function () {\r\n            removeMsg(msgId);\r\n            socket.emit('remove-chat-message',{\r\n              msgId: msgId\r\n            });\r\n          }).set('title', 'Confirm');\r\n        };\r\n        socket.on('remove-chat-message', function(data) {\r\n          console.log(data);\r\n          console.log($scope.chatMessages);\r\n          removeMsg(data.msgId);\r\n        });\r\n        $scope.changeTab = function(tab) {\r\n          $scope.chatPanel = tab;\r\n          if($scope.chatPanel === 'privateChat'){\r\n            $scope.hightLighTab = false;\r\n            reloadUsersToken();\r\n          }\r\n        };\r\n        function reloadUsersToken() {\r\n          var userIds = [];\r\n          const members = angular.copy($scope.videoRequests);\r\n          _.map(members, function(member){\r\n              userIds.push(member.from);\r\n          });\r\n          userService.getToken(userIds.join()).success(function(data){\r\n            for(var i in members){\r\n              var member = _.find(data, function(o) { return o.id === members[i].from; });\r\n              $scope.videoRequests[i].tokens = member.tokens;\r\n            }\r\n            $scope.$$phase || $scope.$apply();            \r\n          });\r\n        }\r\n      }\r\n    };\r\n  }\r\n])\r\n        .directive('mChatScroll', ['$', function ($) {\r\n            return {\r\n              link: function (scope, ele) {\r\n                scope.$on('new-chat-message', function () {\r\n\r\n                  //check current scroll of the div\r\n//                  var height = $('.list-chat', $(ele)).outerHeight();\r\n\r\n                  //TODO - check position on scroll\r\n//                  if($ele.scrollTop() + $ele.innerHeight() >= $(ele)[0].scrollHeight) {\r\n//                    alert('end reached');\r\n//                  }\r\n//                  \r\n\r\n                  var height = $('.list-chat', $(ele)).height();\r\n                  ele.find('li').each(function (i, value) {\r\n                    height += parseInt($(this).outerHeight());\r\n                  });\r\n\r\n                  $('.list-chat', ele).animate({scrollTop: height});\r\n//                  ele.animate({scrollTop: height});\r\n                });\r\n              }\r\n            };\r\n          }]);\r\n","'use strict';\r\n\r\nangular.module('matroshkiApp')\r\n.directive('mPrivateChatVideo', ['appSettings', '$timeout', '$interval', 'socket', 'VideoStream', 'peerService', '$sce', 'userService', 'onlineService', function(appSettings, $timeout, $interval, socket, VideoStream, peerService, $sce, userService, onlineService) {\r\n  return {\r\n    restrict: 'AE',\r\n    templateUrl: appSettings.BASE_URL + 'app/views/partials/private-chat-video-widget.html',\r\n    scope: {\r\n      modelId: '=modelId',\r\n      memberId: '=memberId',\r\n      room: '@',\r\n      virtualRoom: '@',\r\n      streamingInfo : \"=ngModel\"\r\n    },\r\n    controller: function($scope, socket, userService, PerformerChat, $timeout, $window) {\r\n      $scope.userRole = appSettings.USER.role;\r\n      $scope.streamingInfo.type = 'private';\r\n      $scope.streamingInfo.hasRoom = true;\r\n      $scope.streamingInfo.removeMyRoom = false;\r\n      $scope.second = 60;\r\n      $scope.sendCallRequest = function() {\r\n        socket.emit('checkOnline', $scope.modelId.toString(), function(data) {\r\n          if(!data.isOnline) {\r\n            return alertify.error('Model is now offline');\r\n          }\r\n          //check user token before start connect.\r\n          userService.get().then(function (data) {\r\n            if (data.data) {\r\n              if(parseInt(data.data.tokens) < 1){\r\n                return alertify.error('Credit is finished and chat will end', 6, function() {\r\n                  return endStream();\r\n                })\r\n              } else {\r\n                // open room for streaming\r\n                connection.open($scope.virtualRoom, function(isRoomOpened, roomid, error) {\r\n                  if (isRoomOpened === true) {\r\n                    $scope.userStreaming = true;\r\n                    peerService.joinRoom($scope.virtualRoom, {\r\n                      memberId: $scope.memberId,\r\n                      modelId: $scope.modelId,\r\n                      room: $scope.room\r\n                    });\r\n                  } else {\r\n                    if (error === connection.errors.ROOM_NOT_AVAILABLE) {\r\n                        alert('Someone already created this room. Please either join or create a separate room.');\r\n                        return;\r\n                    }\r\n                    alert(error);\r\n                  }\r\n                });\r\n              }\r\n            } else {\r\n              return false;\r\n            }\r\n          });\r\n        });\r\n          \r\n      };\r\n      $scope.acceptRequest = function() {\r\n          connection.join($scope.virtualRoom, function(isJoinedRoom, roomid, error) {\r\n              if (error) {\r\n                  if (error === connection.errors.ROOM_NOT_AVAILABLE) {\r\n                      alert('This room does not exist. Please either create it or wait for moderator to enter in the room.');\r\n                      return;\r\n                  }\r\n                  if (error === connection.errors.ROOM_FULL) {\r\n                      alert('Room is full.');\r\n                      return;\r\n                  }\r\n                  alert(error);\r\n                  return;\r\n              }\r\n              peerService.joinRoom($scope.virtualRoom, {\r\n                memberId: $scope.memberId,\r\n                modelId: $scope.modelId,\r\n                room: $scope.room\r\n              });\r\n              $scope.modelStreaming = true;\r\n          });\r\n      };\r\n      var connection = new RTCMultiConnection();\r\n      // maximum two users are allowed to join single room\r\n      connection.maxParticipantsAllowed = 2;\r\n      connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';\r\n      connection.socketMessageEvent = 'one-to-one-demo';\r\n      connection.session = {\r\n          audio: true,\r\n          video: true\r\n      };\r\n      connection.sdpConstraints.mandatory = {\r\n          OfferToReceiveAudio: true,\r\n          OfferToReceiveVideo: true\r\n      };\r\n      connection.videosContainer = document.getElementById('private-videos-container');\r\n\r\n      connection.onstream = function(event) {\r\n        var existing = document.getElementById(event.streamid);\r\n        if (existing && existing.parentNode) {\r\n            existing.parentNode.removeChild(existing);\r\n        }\r\n        event.mediaElement.removeAttribute('src');\r\n        event.mediaElement.removeAttribute('srcObject');\r\n        event.mediaElement.muted = true;\r\n        event.mediaElement.volume = 0;\r\n        var video = document.createElement('video');\r\n        try {\r\n            video.setAttributeNode(document.createAttribute('autoplay'));\r\n            video.setAttributeNode(document.createAttribute('playsinline'));\r\n        } catch (e) {\r\n            video.setAttribute('autoplay', true);\r\n            video.setAttribute('playsinline', true);\r\n        }\r\n        if (event.type === 'local') {\r\n            video.volume = 0;\r\n            try {\r\n                video.setAttributeNode(document.createAttribute('muted'));\r\n            } catch (e) {\r\n                video.setAttribute('muted', true);\r\n            }\r\n        }\r\n        video.srcObject = event.stream;\r\n        video.className = event.type;\r\n        connection.videosContainer.appendChild(video);\r\n        setTimeout(function() {\r\n            video.play();\r\n        }, 5000);\r\n        video.id = event.streamid;\r\n        // to keep room-id in cache\r\n        localStorage.setItem(connection.socketMessageEvent, connection.sessionid);\r\n        if (event.type === 'local') {\r\n            connection.socket.on('disconnect', function() {\r\n                if (!connection.getAllParticipants().length) {\r\n                    location.reload();\r\n                }\r\n            });\r\n        }\r\n        if(connection.getAllParticipants().length > 0 && $scope.userRole === 'member') {\r\n          $interval(function () {\r\n            if($scope.second === 60){\r\n                $scope.second = 0;\r\n                $scope.streamingInfo.time++;\r\n                sendPaidTokens();\r\n            }\r\n            $scope.second++;\r\n          }, 1000);\r\n        }\r\n      };\r\n\r\n      connection.onstreamended = function(event) {\r\n          var mediaElement = document.getElementById(event.streamid);\r\n          if (mediaElement) {\r\n              mediaElement.parentNode.removeChild(mediaElement);\r\n          }\r\n          alertify.message('Chat will end now', 30);\r\n          $timeout(endStream, 6000);\r\n      };\r\n      connection.onMediaError = function(e) {\r\n          if (e.message === 'Concurrent mic process limit.') {\r\n              if (DetectRTC.audioInputDevices.length <= 1) {\r\n                  alert('Please select external microphone. Check github issue number 483.');\r\n                  return;\r\n              }\r\n              var secondaryMic = DetectRTC.audioInputDevices[1].deviceId;\r\n              connection.mediaConstraints.audio = {\r\n                  deviceId: secondaryMic\r\n              };\r\n              document.getElementById('join-room').onclick();\r\n          }\r\n      };\r\n      $scope.stopStreaming = function() {\r\n        if (appSettings.USER && appSettings.USER.role == 'member') {\r\n          socket.emit('stop-video-request', \r\n          { \r\n            data: {\r\n              modelId: $scope.modelId,\r\n            } \r\n          });\r\n        }\r\n        socket.emit('model-leave-room');\r\n        endStream();\r\n      };\r\n      function endStream() {\r\n        if(appSettings.USER.role == 'model'){\r\n          $window.location.href = '/models/live';\r\n        } else {\r\n          $window.location.href = '/';\r\n        }\r\n      }\r\n\r\n      function sendPaidTokens() {\r\n        userService.sendPaidTokens($scope.modelId, 'private').then(function (response)\r\n        {\r\n          if(response.data && parseInt(response.data.spend) > 0){\r\n              $scope.streamingInfo.spendTokens += parseInt(response.data.spend);\r\n              $scope.streamingInfo.tokens = response.data.tokens;\r\n              socket.sendModelReceiveInfo({time: 1, tokens: response.data.spend});\r\n          }\r\n          if (response.data.success == false) {\r\n             socket.emit('member-missing-tokens', $scope.chatType);\r\n             return alertify.error('Credit is finished and chat will end', 6, endStream);\r\n          }\r\n        });\r\n      }\r\n\r\n      // show full screen\r\n      $scope.isFullScreenMode = false;\r\n      $scope.showFullScreen = function() {\r\n          $scope.isFullScreenMode = true;\r\n          $('.header').addClass('hidden');\r\n          $('.line-menu').addClass('hidden');\r\n          $('.footer').addClass('hidden');\r\n          $('body').addClass('fullscreen-mode');\r\n          $('.panel-heading').addClass('hidden');\r\n          $('.private-chat-instruction').addClass('hidden');\r\n          $scope.isFullScreenMode = true;\r\n      };\r\n      $scope.notShowFullScreen = function() {\r\n          $scope.isFullScreenMode = false;\r\n          $('.header').removeClass('hidden');\r\n          $('.line-menu').removeClass('hidden');\r\n          $('.footer').removeClass('hidden');\r\n          $('body').removeClass('fullscreen-mode');\r\n          $('.panel-heading').removeClass('hidden');\r\n          $('.private-chat-instruction').removeClass('hidden');\r\n      };\r\n    }\r\n  };\r\n}]);","angular.module('matroshkiApp').directive('mGroupChatVideo', ['appSettings', '$timeout', '$interval', 'socket', 'VideoStream', 'peerService', '$sce', 'onlineService', 'userService', function (appSettings, $timeout, $interval, socket, VideoStream, peerService, $sce, onlineService, userService) {\r\n  return {\r\n    restrict: 'AE',\r\n    templateUrl: appSettings.BASE_URL + 'app/views/partials/group-chat-video-widget.html',\r\n    scope: {\r\n      modelId: '=modelId',\r\n      memberId: '=memberId',\r\n      room: '@',\r\n      onModelRoom: '@',\r\n      virtualRoom: '@',\r\n      streamingInfo: \"=ngModel\"\r\n    },\r\n    controller: function controller($scope, userService, PerformerChat, $window) {\r\n      $scope.userRole = appSettings.USER.role;\r\n      const streams = [];\r\n      $scope.isShowLargeVideo = false;\r\n      $scope.second = 60;\r\n      $scope.streamingInfo.type = 'group';\r\n      $scope.startConversation = function() {\r\n          connection.open($scope.virtualRoom, function(isRoomOpened, roomid, error) {\r\n              if(isRoomOpened === true) {\r\n                $scope.modelStreaming = true;\r\n                peerService.joinGroupRoom($scope.virtualRoom, {\r\n                  memberId: $scope.memberId,\r\n                  modelId: $scope.modelId,\r\n                  type: 'group',\r\n                  room: $scope.room\r\n                });\r\n              }\r\n              else {\r\n                if(error === 'Room not available') {\r\n                  alert('Someone already created this room. Please either join or create a separate room.');\r\n                  return;\r\n                }\r\n                alert(error);\r\n              }\r\n          });\r\n      };\r\n      $scope.joinConversation = function() {\r\n        userService.get().then(function (data) {\r\n          if (data.data) {\r\n            if (parseInt(data.data.tokens) < 1) {\r\n              return alertify.error('Your tokens do not enought, please buy more.');\r\n            } else {\r\n              connection.join($scope.virtualRoom, function(isJoinedRoom, roomid, error) {\r\n                if (error) {\r\n                    if(error === 'Room not available') {\r\n                      alert('This room does not exist. Please either create it or wait for moderator to enter in the room.');\r\n                      return;\r\n                    }\r\n                    alert(error);\r\n                }\r\n                $scope.userStreaming = true;\r\n                $scope.$$phase || $scope.$apply();\r\n              });\r\n            }\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n          \r\n      };\r\n      // ......................................................\r\n      // ..................RTCMultiConnection Code.............\r\n      // ......................................................\r\n      var connection = new RTCMultiConnection();\r\n      // by default, socket.io server is assumed to be deployed on your own URL\r\n      // comment-out below line if you do not have your own socket.io server\r\n      connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';\r\n      connection.socketMessageEvent = 'video-conference-demo';\r\n      connection.session = {\r\n          audio: true,\r\n          video: true\r\n      };\r\n      connection.sdpConstraints.mandatory = {\r\n          OfferToReceiveAudio: true,\r\n          OfferToReceiveVideo: true\r\n      };\r\n      connection.videosContainer = document.getElementById('groupchat-videos-container');\r\n      connection.onstream = function(event) {\r\n          var existing = document.getElementById(event.streamid);\r\n          if(existing && existing.parentNode) {\r\n            existing.parentNode.removeChild(existing);\r\n          }\r\n          event.mediaElement.removeAttribute('src');\r\n          event.mediaElement.removeAttribute('srcObject');\r\n          event.mediaElement.muted = true;\r\n          event.mediaElement.volume = 0;\r\n          var video = document.createElement('video');\r\n          try {\r\n              video.setAttributeNode(document.createAttribute('autoplay'));\r\n              video.setAttributeNode(document.createAttribute('playsinline'));\r\n          } catch (e) {\r\n              video.setAttribute('autoplay', true);\r\n              video.setAttribute('playsinline', true);\r\n          }\r\n          if(event.type === 'local') {\r\n            video.volume = 0;\r\n            try {\r\n                video.setAttributeNode(document.createAttribute('muted'));\r\n            } catch (e) {\r\n                video.setAttribute('muted', true);\r\n            }\r\n          }\r\n          streams.push({\r\n            id: event.streamid,\r\n            stream: event.stream\r\n          });\r\n          video.srcObject = event.stream;\r\n          video.className = 'video-in-group';\r\n          connection.videosContainer.appendChild(video);\r\n          setTimeout(function() {\r\n            video.play();\r\n          }, 5000);\r\n          video.id = event.streamid;\r\n          // to keep room-id in cache\r\n          localStorage.setItem(connection.socketMessageEvent, connection.sessionid);\r\n          if(event.type === 'local') {\r\n            connection.socket.on('disconnect', function() {\r\n              if(!connection.getAllParticipants().length) {\r\n                location.reload();\r\n              }\r\n            });\r\n          }\r\n          if(connection.getAllParticipants().length > 0 && $scope.userRole === 'member') {\r\n            $interval(function () {\r\n              if($scope.second === 60){\r\n                  $scope.second = 0;\r\n                  $scope.streamingInfo.time++;\r\n                  sendPaidTokens();\r\n              }\r\n              $scope.second++;\r\n            }, 1000);\r\n          }\r\n      };\r\n\r\n      //change large video\r\n      $(document).on('click', '.video-in-group', function() {\r\n        $('.video-in-group').removeClass('active');\r\n        $(this).addClass('active');\r\n        const streamId = $(this).attr('id');\r\n        const stream = streams.find(str => streamId === str.id);\r\n        const videoCurr = document.getElementById('currentvideo-groupchat');\r\n        if(stream) {\r\n          videoCurr.srcObject = stream.stream;\r\n          setTimeout(function() {\r\n            videoCurr.play();\r\n            $scope.isShowLargeVideo = true;\r\n            $scope.$$phase || $scope.$apply();\r\n          });\r\n        }\r\n      });\r\n      \r\n      connection.onstreamended = function(event) {\r\n          var mediaElement = document.getElementById(event.streamid);\r\n          if (mediaElement) {\r\n              mediaElement.parentNode.removeChild(mediaElement);\r\n          }\r\n      };\r\n      connection.onMediaError = function(e) {\r\n          if (e.message === 'Concurrent mic process limit.') {\r\n              if (DetectRTC.audioInputDevices.length <= 1) {\r\n                  alert('Please select external microphone. Check github issue number 483.');\r\n                  return;\r\n              }\r\n              var secondaryMic = DetectRTC.audioInputDevices[1].deviceId;\r\n              connection.mediaConstraints.audio = {\r\n                  deviceId: secondaryMic\r\n              };\r\n              connection.join(connection.sessionid);\r\n          }\r\n      };\r\n\r\n      $scope.stopStreaming = function() {\r\n        socket.emit('model-leave-room');\r\n        endStream();\r\n      };\r\n      function endStream() {\r\n        if(appSettings.USER.role == 'model'){\r\n          $window.location.href = '/models/live';\r\n        } else {\r\n          $window.location.href = '/';\r\n        }\r\n      }\r\n      /**\r\n       * process payment per minute\r\n       */\r\n      function sendPaidTokens() {\r\n        userService.sendPaidTokens($scope.modelId, 'group').then(function (response) {\r\n          if (response.data && parseInt(response.data.spend) > 0) {\r\n            $scope.streamingInfo.spendTokens += parseInt(response.data.spend);\r\n            $scope.streamingInfo.tokens = response.data.tokens;\r\n            socket.sendModelReceiveInfo({ member: $scope.memberId, time: 1, tokens: response.data.spend });\r\n          }\r\n          if (response.data.success == false) {\r\n            alertify.error('Your tokens do not enough, please buy more.', 5, endStream);\r\n            socket.emit('member-missing-tokens', $scope.chatType);\r\n            return;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n}]);","/* \r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n'use strict';\r\n\r\nangular.module('matroshkiApp').directive('uploadFile', ['appSettings', 'mediaService', function (appSettings, mediaService) {\r\n\r\n    return {\r\n      restrict: 'AE',\r\n      template: '<div><input type=\"hidden\" name=\"myFiles\" ng-model=\"myFiles\"><div id=\"mulitplefileuploader\">Upload</div><div id=\"status\"></div></div>',\r\n      require: 'ngModel',\r\n      replace: true,\r\n      scope: {\r\n        myfiles: '=ngModel',\r\n        fileName: '@',\r\n        multiple: '@',\r\n        showDelete: '@',\r\n        showPreview: '@',\r\n        allowedTypes: '@',\r\n        mediaType: '@',\r\n        parentId: '@',\r\n        showDone: '@'\r\n      },\r\n//      templateUrl: appSettings.BASE_URL + 'app/views/partials/editor.html',\r\n      link: function (scope, elem, attr, ngModel) {\r\n        var current = [];\r\n//        scope.myPhotos = ngModelCtrl;\r\n        if (!ngModel)\r\n          return; // do nothing if no ng-model\r\n\r\n        // Specify how UI should be updated\r\n//        ngModel.$render = function () {\r\n//          \r\n//        };\r\n        ngModel.$render = function () {\r\n//          elem.html(ngModel.$viewValue || '');\r\n        };\r\n        var mediaType = (scope.mediaType) ? scope.mediaType : '';\r\n        var parentId = (scope.parentId) ? scope.parentId : 0;\r\n        var settings = {\r\n          url: appSettings.BASE_URL + 'api/v1/upload-items?parent-id='+parentId+'&mediaType='+mediaType,\r\n          method: \"POST\",\r\n          allowedTypes: \"jpg,png,gif,jpeg,mp4,m4v,ogg,ogv,webm\",\r\n          fileName: \"myFiles\",\r\n          multiple: true,\r\n          showDelete: true,\r\n          showPreview: false,\r\n          showDone: true,\r\n          statusBarWidth: '55%',\r\n          dragdropWidth: '55%',\r\n          onSuccess: function (files, data, xhr)\r\n          {\r\n\r\n            if (data.success == true) {\r\n//              ngModelCtrl.$viewValue = data.fileName;\r\n//              scope.$apply(function () {\r\n//                ngModelCtrl.$setViewValue(data.fileName);\r\n//                ngModelCtrl.$setViewValue('StackOverflow');\r\n//              });\r\n//              scope.$watch('myPhotos', function (value) {\r\n//                if (ngModelCtrl.$viewValue != value) {\r\n//                  ngModelCtrl.$setViewValue(data.fileName);\r\n//                  \r\n//                }\r\n//              });\r\n\r\n\r\n              current.push(data.file.id);\r\n              ngModel.$setViewValue(current);\r\n\r\n              $(\"#status\").html(\"<font color='green'>\" + data.message + \"</font>\");\r\n            } else {\r\n              $(\"#status\").html(\"<font color='red'>\" + data.message + \"</font>\");\r\n            }\r\n\r\n          },\r\n          onError: function (files, status, errMsg)\r\n          {\r\n            $(\"#status\").html(\"<font color='red'>Upload is Failed</font>\");\r\n          },\r\n          deleteCallback: function (element, data, pd) {\r\n\r\n            if (element.file.type.indexOf('image') != -1) {\r\n              mediaService.deleteImage(element.file.id).then(function (data) {\r\n                if (data.data.success) {\r\n                  var index = current.indexOf(element.file.id);\r\n                  current.splice(index, 1);\r\n                  ngModel.$setViewValue(current);\r\n                  alertify.success(data.data.message);\r\n                } else {\r\n                  alertify.error(data.data.message);\r\n                }\r\n              });\r\n            } else if (element.file.type.indexOf('video') != -1) {\r\n              mediaService.deleteVideo(element.file.id).then(function (data) {\r\n                if (data.data.success) {\r\n                  var index = current.indexOf(element.file.id);\r\n                  current.splice(index, 1);\r\n                  ngModel.$setViewValue(current);\r\n                  alertify.success(data.data.message);\r\n                } else {\r\n                  alertify.error(data.data.message);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        };\r\n        $(\"#mulitplefileuploader\").uploadFile(settings);\r\n\r\n      }\r\n\r\n\r\n    };\r\n  }]);\r\n\r\n","/* \r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n'use strict';\r\n\r\nangular.module('matroshkiApp').directive('multipleUpload', ['appSettings', 'mediaService', function (appSettings, mediaService) {\r\n\r\n    return {\r\n      restrict: 'AE',\r\n      template: '<div><input type=\"hidden\" name=\"myfiles\" ng-model=\"myFiles\"><div id=\"mulitplefileuploader\">Upload</div><div id=\"status\"></div></div>',\r\n      require: 'ngModel',\r\n      replace: true,\r\n      scope: {\r\n        files: '=ngModel',\r\n        fileName: '@',\r\n        multiple: '@',\r\n        showDelete: '@',\r\n        showPreview: '@',\r\n        allowedTypes: '@',\r\n        mediaType: '@',\r\n        parentId: '@',\r\n        showDone: '@',\r\n        modelId: '@'\r\n      },\r\n      link: function (scope, elem, attr, ngModel) {\r\n        var myFiles = [];\r\n\r\n        if (!ngModel)\r\n          return; // do nothing if no ng-model\r\n\r\n        // Specify how UI should be updated\r\n//        ngModel.$render = function () {\r\n//          \r\n//        };\r\n\r\n        ngModel.$render = function () {\r\n\r\n        };\r\n        var mediaType = (scope.mediaType) ? scope.mediaType : '';\r\n        var parentId = (scope.parentId) ? scope.parentId : null;\r\n        var modelId = (scope.modelId) ? scope.modelId : null;\r\n        var settings = {\r\n          url: appSettings.BASE_URL + 'api/v1/upload-items?mediaType=' + mediaType + '&parent-id=' + parentId + '&model-id=' + modelId,\r\n          method: \"POST\",\r\n          allowedTypes: scope.allowedTypes,\r\n          fileName: 'myFiles',\r\n          multiple: scope.multiple,\r\n          showDelete: scope.showDelete,\r\n          showPreview: scope.showPreview,\r\n          showDone: scope.showDone,\r\n          statusBarWidth: '100%',\r\n          dragdropWidth: '100%',\r\n          onSuccess: function (files, data, xhr, pd)\r\n          {\r\n\r\n            if (data.success == true) {\r\n\r\n              myFiles.push(data.file);\r\n\r\n              ngModel.$setViewValue(myFiles);\r\n//              alertify.success(files);\r\n//              console.log(pd);\r\n              var uploadName = pd.filename[0].innerHTML;\r\n              alertify.success(uploadName + ' ' + data.message)\r\n//              $(\"#status\").html(\"<font color='green'>\" + data.message + \"</font>\");\r\n            } else {\r\n//              $(\"#status\").html(\"<font color='red'>\" + data.message + \"</font>\");\r\n              alertify.error(data.message);\r\n            }\r\n\r\n          },\r\n          onError: function (files, status, errMsg)\r\n          {\r\n            $(\"#status\").html(\"<font color='red'>Upload is Failed</font>\");\r\n          },\r\n          deleteCallback: function (element, data, pd) {\r\n\r\n            if (element.file.type.indexOf('image') != -1) {\r\n              mediaService.deleteImage(element.file.id).then(function (data) {\r\n                if (data.data.success) {\r\n                  var index = myFiles.indexOf(element.file.id);\r\n                  myFiles.splice(index, 1);\r\n                  ngModel.$setViewValue(myFiles);\r\n                  alertify.success(data.data.message);\r\n                } else {\r\n                  alertify.error(data.data.message);\r\n                }\r\n              });\r\n            } else if (element.file.type.indexOf('video') != -1) {\r\n              mediaService.deleteVideo(element.file.id).then(function (data) {\r\n                if (data.data.success) {\r\n                  var index = myFiles.indexOf(element.file.id);\r\n                  myFiles.splice(index, 1);\r\n                  ngModel.$setViewValue(myFiles);\r\n                  alertify.success(data.data.message);\r\n                } else {\r\n                  alertify.error(data.data.message);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        };\r\n        $(\"#mulitplefileuploader\").uploadFile(settings);\r\n\r\n      }\r\n\r\n\r\n    };\r\n  }]);\r\n\r\n","'use strict';\r\nangular.module('matroshkiApp')\r\n.directive('checkUserOnline', ['socket', 'userService', function (socket, userService) {\r\n\treturn {\r\n\t  restrict: 'A',\r\n\t  scope: {\r\n        userId: '@'\r\n      },\r\n\t  template: `<span ng-class=\"{'text-warning': !online, 'text-success': online && !isBusy , 'text-danger': isBusy}\"><i class=\"fa fa-circle\"></i>\r\n\t              <span ng-show=\"!online\">Offline</span><span ng-show=\"online && !isBusy\">Online</span><span ng-show=\"isBusy\">Busy</span></span>`,\r\n\t  link: function (scope) {\r\n\t  \tuserService.checkBusy(scope.userId).then(function(data) {\r\n\t  \t\tif(data.data.isBusy) {\r\n\t  \t\t\tscope.isBusy = true;\r\n\t  \t\t}\r\n\t  \t});\r\n\t    socket.emit('checkOnline', scope.userId.toString(), function(data) {\r\n\t    \tscope.online = data.isOnline;\r\n\t    });\r\n\t  }\r\n\t};\r\n}]);"]}